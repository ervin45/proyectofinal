.. raw:: latex

   \maketitle

.. contents::


========================================================================
                            Introducción
========================================================================

------------------------------------------------------------------------
Temática
------------------------------------------------------------------------

La Empresa Ricardo C. Bieler se dedica a la comercialización de
vehículos (autos, camionetas y camiones), repuestos y servicios
relacionados con el rubro automotor. Tiene la concesión de venta
exclusiva de Mercedes-Benz, Chrysler, Jeep y Dodge. La empresa cuenta
con 60 empleados en diversas áreas, desde el salón comercial hasta un
importante taller. Posee dos sucursales en Reconquista y Rafaela.

La empresa Ricardo C. Bieler S.A. no posee, en la actualidad, un
sistema de soporte de decisiones en lo que se refiere a la compra y
venta de unidades (camiones, utilitarios y automóviles). En el caso de
los repuestos, los movimientos de entrada y salida se basan en
estimaciones por parte del personal actual con un soporte informático
mínimo.

Dentro de las competencias de un ingeniero en sistema se encuentran el
diseño, análisis e implementación de un sistema de soporte de
decisiones.

El presente proyecto propone utilizar técnicas aprendidas en el
transcurso de la carrera para diseñar un sistema que permita a los
dueños y gerentes de la firma obtener un diagnóstico estratégico de su
negocio.

Los productos existentes que brindan una parte de este tipo de
soluciones son: Agata Report, Jasper, Pentaho Reporting para reportes
y Mondrian, Palo para OLAP (On Line Analytical Processing). Como
soporte de datos para el modelado dimensional, utilizan Data
Warehouses sobre bases de datos como Oracle, MS-SQL Server, Postgre,
MySQL, entre otros.

------------------------------------------------------------------------
Problemática
------------------------------------------------------------------------

En el transcursos de los años en lo que funciona la empresa, esta ha
ido acumulando datos acerca de las operaciones que realiza para para
poder devenvolverse en su ambito de negocio. Todos estos datos solo
fueron acumulados en los sistemas internos que utiliza la empresa sin
la posibilidad de realizar un analisis mas completo que permita la
toma de decisiones en un nivel estrategico basado no solo en intuición
del empresario sino tambien en datos cuantitativos y objetivos.

La empresa no tenia una manera sencilla y eficaz de analizar sus datos
operacionales. No era posible realizar una comparacion de los datos en
diferentes variables en un tiempo razonable que permita la toma de
decisiones. Esto era un problema a la hora de decidir el tipo de
compras en materia de autos, camiones y repuestos para alcanzar
objetivos como ser maximizar las ganancias.

Ricardo C. Bieler S.A. consta de un casa central y dos sucursales en
la provincia. Las decisiones solo eran posibles desde el punto central
por ser el unico que tenia acceso a toda la información de la
empresa. Esto provocaba que el proceso de toma de decisiones estuviera
centralizado en muy pocas personas y los aportes de gerentes de las
sucursales fueran minimos. Por esta causa se hacia muy necesario tener
la posibilidad de acceder a las funcionalidades del sistema desde
cualquiera de estos puntos de decisión y asi agilizar los mecanismos
decisionales.

La lógica de almacenamiento de información empresarial en los últimos
años ha sido analizada y desarrollada bajo distintas ópticas. Data
Warehouse, propuesta por Bill Inmon y Ralph Kimball, entre otros, a
finales de los '90 demostró ser una de las formas más destacadas de
organizar, almacenar y visualizar la información crítica para ser
llevada a los niveles de decisión estratégica de las organizaciones.
Para la aplicación de esta técnica en la toma de decisiones es
necesario un volumen significativo de datos sensibles (como la
facturación).

En nuestro caso, Ricardo C. Bieler S.A. nos facilitó las bases de
datos de facturación de los últimos siete años, evitando la necesidad
de comenzar la tediosa tarea de recolección de los mismos en otra
empresa. Por otro lado el cliente tiene la imperiosa necesidad de
herramientas de diagnóstico y ayuda en la toma de decisiones para
mejorar el funcionamiento de su empresa, ya que en la actualidad no
existe ningún sistema que le brinde esta funcionalidad en tiempo real.

Debido a las características particulares de la estructura de sistemas
de información de la empresa, es necesario realizar adaptaciones a
medida para la generación de informes personalizados que sean de facil
generación y consulta. Las herramientas comerciales del mercado no
ofrecen la flexibilidad suficiente para esta tarea.

------------------------------------------------------------------------
Objetivos y alcances
------------------------------------------------------------------------

El sistema funcionará en las sucursales de Rafaela, Reconquista y casa
central en Santa Fe de Ricardo C. Bieler S.A. y los decisores podrán
consultarlo desde donde deseen a través de Internet.

El sistema permitirá la generación de informes semanales, alarmas y
sugerencias en la toma de decisiones para los gerentes y dueños de la
empresa, acerca de la totalidad de las unidades y repuestos comprados
y vendidos en los últimos siete años.

* Diseñar el Data WareHouse. Se diseñarán las tablas de hechos y
  dimensiones que responderán a los informes.

* Diseñar el ETL. Se desarrollara una herramienta que hará la
  extracción, transformación y carga de información en el Data
  Warehouse.

* Diseñar la arquitectura, esto implica relevar de requisitos no
  funcionales del sistema.

* Gestionar informes de Compra y Venta de Unidades (camiones y autos)

* Gestionar informes de Compra y Venta de Repuestos y accesorios

* Gestionar informes de Stock de Unidades.

* Gestionar informes de Stock de Repuestos.

* Gestionar informes de control de comisiones de taller mecánico.

* Gestionar informes comparativos de ventas entre las sucursales. La
  empresa tiene sucursales en Santa Fe, Rafaela y Reconquista.

* Gestionar informes comparativos de ventas de Mercedes Benz de
  Ricardo C. Bieler con las demás concesionarias del país.

* Gestionar Pronósticos de Ventas. El sistema permitirá realizar
  pronósticos de con distintas técnicas para mejorar la toma de
  decisiones.

* Permitir la gestión de alertas. El sistema debe permitir la
  definición de eventos importantes como vencimientos y encargarse de
  emitir el alerta correspondiente cuando este tiene lugar.

* Gestionar informes de seguimiento de compra en relación a objetivos
  de compra establecidos por los proovedores de unidades,
  principalmente Mercedes Benz y Chrysler. 

* Diseñar la red de información que le dará conectividad al sistema de
  información.

* Emisión e impresión de reportes necesarios para la toma de
  decisiones.

* Gestión de usuarios. El sistema permitirá a la empresa definir
  diferentes roles con determinados permisos.


------------------------------------------------------------------------
Organización del documento
------------------------------------------------------------------------



========================================================================
                             Desarrollo
========================================================================

------------------------------------------------------------------------
Terminología utilizada
------------------------------------------------------------------------

:Base de datos multidimensional: Es una base de datos con tablas que
      representan hechos (ejemplo: ventas, compras) y tablas que
      representan dimensiones sobre esos hechos (ejemplo: tiempo,
      sucursal, cliente).

:Data Warehouse: Coleccion de datos almacenados orientados a un
      determinado ambito cuyo. Es una copia de las transacciones de
      datos específicamente estructurada para la consulta y el
      análisis.

:OLAP: Es una solución utilizada en el campo de la llamada
       Inteligencia empresarial (o Business Intelligence) cuyo
       objetivo es agilizar la consulta de grandes cantidades de
       datos. Para ello utiliza estructuras multidimensionales (o
       Cubos OLAP) que contienen datos resumidos de grandes Bases de
       Datos o Sistemas Transaccionales (OLTP).

:ETL: Extracción, Transformación y Carga de datos. Referido
      normalmente al proceso de extraer datos de los almacenamientos
      necesarios, realizar un procesamientos o transformacion de estos
      y almacenarlos o cargarlos en la estructura del Data Warehouse

:Data Mining: proceso que consiste en la extracción de conocimiento
      procesable, implícito en las bases de datos. Es decir lograr
      sacar conclusiones utiles a partir de un conjunto de datos no
      orientado a estas.

:XMLA: XML ..for analysis

------------------------------------------------------------------------
Metodología elegida
------------------------------------------------------------------------

La programación extrema o eXtreme Programming (XP) es un enfoque de la
ingeniería del Sofware. Consiste en un conjunto de prácticas que a lo
largo de los años han demostrado ser las mejores prácticas de
desarrollo de software, llevadas al extremo, fundamentadas en un
conjunto de valores.

Es la más destacada de los procesos ágiles de desarrollo de
software. Al igual que éstos, la programación extrema se diferencia de
las metodologías tradicionales principalmente en que pone más énfasis
en la adaptabilidad que en la previsibilidad.

Los defensores de XP consideran que los cambios de requisitos sobre la
marcha son un aspecto natural, inevitable e incluso deseable del
desarrollo de proyectos. Creen que ser capaz de adaptarse a los
cambios de requisitos en cualquier punto de la vida del proyecto es
una aproximación mejor y más realista que intentar definir todos los
requisitos al comienzo del proyecto e invertir esfuerzos después en
controlar los cambios en los requisitos. Se puede considerar la
programación extrema como la adopción de las mejores metodologías de
desarrollo de acuerdo a lo que se pretende llevar a cabo con el
proyecto, y aplicarlo de manera dinámica durante el ciclo de vida del
software.

Valores
-------


XP promueve una serie de valores que sientan los pilares los pilares
de la metodología. Estos valores son:


:Comunicación: los desarrolladores necesitan intercambiar información
	       e ideas sobre el proyecto, a los directivos, y a los
	       clientes de forma honrada, confiable y fácil. La
	       información debe fluir de manera continua y rápida.

:Sencillez: siempre que sea posible hay que elegir soluciones
	    simples. Esto no significa estar equivocado o aplicar
	    enfoques simplistas.

:Retroalimentación: en todos los niveles las personas deberían obtener
		    una retroalimentación muy rápida sobre lo que
		    hacen. Los clientes, los directivos y los
		    desarrolladores tienen que alcanzar una
		    comprensión común de la meta del proyecto, y
		    también acerca del estado actual del proyecto.

:Valor: cada persona implicada en el proyecto debería de tener el
	valor (y el derecho) de expresar su valoración sobre el
	proyecto. Todos deberían de tener el valor de ser abiertos y
	dejar que todos examinasen e incluso modificasen su trabajo.

Prácticas
---------

XP esta compuesta por un conjunto de practicas que están estrechamente
relacionadas y que aplicadas todas juntas son capaces de dar soporte a
las debilidades de cada practica. Estas practicas no son nuevas, sino
que han venido usando a lo largo de la corta historia del desarrollo
de software, la novedad radica en la utilización de estas prácticas de
forma conjunta y llevadas al extremo.

Las prácticas fundamentales de la metodología son: 

:Desarrollo iterativo e incremental: pequeñas mejoras, unas tras
	    otras.	

:Pruebas unitarias continuas: frecuentemente repetidas y
	 automatizadas. Se aconseja escribir el código de la prueba
	 antes de la codificación.

:Programación en Parejas: se recomienda que las tareas de desarrollo
	      se lleven a cabo por dos personas en un mismo puesto. Se
	      supone que la mayor calidad del código escrito de esta
	      manera -el código es revisado y discutido mientras se
	      escribe- es más importante que la posible pérdida de
	      productividad inmediata.

:Frecuente interacción del equipo de programación con el cliente o
	   usuario: Se recomienda que un representante del cliente
	   trabaje junto al equipo de desarrollo.

:Corrección de todos los errores antes de añadir nueva funcionalidad:
realizar entregas frecuentes.

:Refactorizacion del código: es decir, reescribir ciertas partes del
código para aumentar su legibilidad y mantenibilidad pero sin
modificar su comportamiento. Las pruebas han de garantizar que en la
refactorización no se ha introducido ningún fallo.

:Propiedad del código compartida: en vez de dividir la responsabilidad
en el desarrollo de cada módulo en grupos de trabajo distintos, este
método promueve el que todo el personal pueda corregir y extender
cualquier parte del proyecto. Las frecuentes pruebas de regresión
garantizan que los posibles errores serán detectados.


:Simplicidad en el código: es la mejor manera de que las cosas
funcionen. Cuando todo funcione se podrá añadir funcionalidad si es
necesario. La programación extrema apuesta que en más sencillo hacer
algo simple y tener un poco de trabajo extra para cambiarlo si se
requiere, que realizar algo complicado y quizás nunca utilizarlo. 

Etapas del proceso
------------------

Cabe aclarar que el orden en el que son citadas las etapas no indica
el orden de seguimiento de estas sino una aproximación. En XP se
trabaja pasando en forma constante de una etapa a la otra en la 
medida de lo posible. Las etapas son las siguientes:

Plantificación
--------------

Se escriben historias, cuya idea principal es describir un caso de uso
en dos o tres líneas con terminología del cliente (de hecho, se supone
que deben ser escritos por el mismo), de tal manera que se creen test
de aceptación para la y permita hacer una estimación de tiempo de
desarrollo del mismo.  Se crea un plan de lanzamiento que debe servir
para crear un calendario que todos puedan cumplir y en cuyo desarrollo
hayan participado todas las personas involucradas en el proyecto. Se
usará como base las historias, participando el cliente en la elección
de los que se desarrollarán, y según las estimaciones de tiempo de los
mismos se crearán las iteraciones del proyecto.  El desarrollo se
divide en iteraciones, cada una de las cuales comienza con un plan de
iteración para el que se eligen las historias a desarrollar y las
tareas de desarrollo.

Diseño
------


Se eligen los diseños más simples que funcionen.

Se elige una metáfora del sistema para que el nombrado de clases,
etcétera, siga una misma línea, facilitando la reutilización y la
comprensión del código.

Se "refactoriza sin piedad". Básicamente, consiste en no tener miedo
de cambiar un diseño o eliminar un código que ya no sirve, o al menos
que ya no es claramente la mejor solución.

Codificación
------------

El cliente está siempre disponible, a ser posible cara a cara. La idea
es que forme parte del equipo de desarrollo, y esté presente en todas
las fases de XP. La idea es usar el tiempo del cliente para estas
tareas en vez de para que cree una detalladísima especificación de
requisitos, y evitar la entrega de un producto peor que le hará perder
tiempo.

El código se ajustará a unos estándares de codificación, asegurando la
consistencia y facilitando la comprensión y refactorización del
código.  Las pruebas unitarias se codifican antes que el código en sí,
haciéndo que la codificación de este último sea más rápida, y que
cuando se afronte la misma se tenga más claro qué objetivos tiene que
cumplir lo que se va a codificar.

La programación del código se realizará en parejas, para aumentar la
calidad del mismo.

Se integra código y se lanza dicha integración de manera frecuente,
evitando divergencias en el desarrollo y permitiendo que todo el mundo
trabaje con la última versión del desarrollo. De esta manera, se
evitará pasar grandes periodos de tiempo integrando el código al final
del desarrollo, ya que las incompatibilidades habrán sido detectadas
enseguida.

Se usa la propiedad colectiva del código, lo que se traduce en que
cualquier programador puede cambiar cualquier parte del código. El
objetivo es fomentar la contribución de ideas por parte de todo el
equipo de desarrollo

Pruebas
-------

Todo el código debe tener pruebas unitarias, y debe pasarlas antes de
ser lanzado.

Cuando se encuentra un error de codificación o bug, se desarrollan
pruebas para evitar volver a caer en el mismo.

Se realizan pruebas de aceptación frecuentemente, publicando los
resultados de las mismas. Estas pruebas son generadas a partir de las
historias elegidas para la iteración, y son "pruebas de caja negra",
en las que el cliente verifica el correcto funcionamiento de lo que se
está probando.

Cuando se pasa la prueba de aceptación, se considera que la
correspondiente historia se ha completado.

Documentación
-------------

Al utilizar la metodología XP, el grupo de desarrollo no documenta de
la misma manera que en las metodologías tradicionales. La
documentación relevante en esta metodología es: aquella intrínseca del
código como comentarios, estándares de codificación, las historias de
usuarios, los casos de prueba, entre otros.

Por otra parte, la comunicación oral de manera informal es incentivada
por esta metodología y la formalización por escrito de los
procedimientos es mínima en comparación con las metodologías
tradicionales. Realizaremos documentación de mantenimiento del sistema
para futuras mejoras y expansiones.

------------------------------------------------------------------------
Motivación
------------------------------------------------------------------------

========================================================================
                        Tecnología Investigada
========================================================================

.. estructura gral un párrafo explica QUE ES, 2do parrafo Nuestra
   experiencia. Tercer parrafo: veredicto.


------------------------------------------------------------------------
Java y aplicaciones Tomcat
------------------------------------------------------------------------

Java es un lenguaje de programación de propósito general orientado a
objetos desarrollado por Sun Microsystems a principios de los años
90. Las aplicaciones Java están típicamente compiladas en un bytecode
que es interpretado o compilado a código nativo para su ejecución.

Las aplicaciones libres existentes con funcionalidades de Data
Warehouse, OLAP o similares, están en su mayoría implementadas en
Java. La suite de herramientas Pentaho[1], posee varias herramientas
para realizar ETL, Data Mining, etc. todas implementadas sobre Tomcat[2].

.. [1] http://www.pentaho.com
.. [2] http://tomcat.apache.org

En el comienzo del proyecto, investigamos la suite Pentaho, en particular el
producto Mondrian descripto en la sección ..., y nos resultó muy complicada la
instalación y configuración.

Una vez configurado, la performance de la aplicación Java era muy
pobre. Entonces decidimos ver alternativas.

------------------------------------------------------------------------
Python
------------------------------------------------------------------------

Python es un lenguaje de programación creado por Guido van Rossum en
el año 1990[3].

.. [3] http://svn.python.org/view/python/trunk/Misc/HISTORY?rev=51814&view=markup

Es comparado habitualmente con TCL, Perl, Scheme, Java y Ruby. En la6500
actualidad Python se desarrolla como un proyecto de código abierto,
administrado por la Python Software Foundation. La última versión
estable del lenguaje es actualmente la 2.5.1 (18 de abril de 2007)(Se
anunció la llegada de la versión 3.0 para el 2008).

------------------------------------------------------------------------
XPWeb
------------------------------------------------------------------------

Es una herramienta web para administrar proyectos que siguen la
metodologia XP. Con esta herramienta es posible realizar la
planificación, gestionar las metaforas, utilizar un calendario,
imprimir reportes con estadisticas y exportar proyectos. Desarrollada
en el lenguaje PHP y de libre uso y distribucion.

Para la planificación permite representar iteraciones, historias de
usuarios y tareas. Es posible introducir tiempos de estimación para la
realización de las tareas e historias y en base a esto realiza
estadisticas de cumplimientos de fechas límite y advierte en pantalla
acerca de vencimientos proximos.

Al ser una herramienta web es de muy facil instalación y publicación,
gracias a ello es muy sencillo acceder a su contenido y edición por
parte de todo el equipo implicado en el desarrollo y planificación del
proyecto.

------------------------------------------------------------------------
Turbo Gears
------------------------------------------------------------------------

Es un framework de desarrollo web para Python. Subdivide el problema
du una aplicación web en capas que interactuan entre si. La filosofía
del proyecto es la reutilización de tecnologías existentes
maduras. Las tecnologías utilizadas son:

:MochiKit: es una biblioteca para simplificar el desarrollo en Javascript.

:Kid: es un sistema de templates amigable tanto para el diseñador
      gráfico como para el programador.

:CherryPy: es una biblioteca para manejar de manera sencilla el
	   entrada/salida de los sistemas web en Python.

:SQLObject: tratamiento de objetos con persistencia de objetos en
	    bases de datos relacionales sin una ocultación total de la
	    base de datos.

El comienzo del proyecto fue realizado en Turbo Gears pero encontramos
algunas debilidades como por ejemplo:

* En caso de error los informes eran escasos y ambigüos.

* La comunidad de desarrolladores del proyecto no respondía de la
  manera esperada.

* La documentación del proyecto estaba desactualizada e incompleta.

------------------------------------------------------------------------
Django
------------------------------------------------------------------------

Django es un framework para desarrollo web en Python basado en el
patron de diseño MVC (Model-View-Controller). A diferencia de Turbo
Gears no se apoya en tecnologías existentes, sino implementa cada una
de las 3 capas logrando una integración superior.

También posee herramientas para un correcto mapeo entre las URLs a
utilizar en la aplicación y los métodos a ser llamados. De esta forma
se pueden realizar cambios de comportamiento sin que afecte la
perspectiva del usuario/cliente web. Esta característica nos brindó la
posibilidad de prototipado rápido y adaptaciones sucesivas.

Una de las premisas del proyecto es el feedback hacia el programador
en el momento del desarrollo de la aplicacion. Nos sorprendió el nivel
de detalle en los informes de errores y las opciones de depuración de
código, esto nos posibilitó acortar los tiempos de iteración en el
desarrollo.

------------------------------------------------------------------------
Turbo Gear vs. Django
------------------------------------------------------------------------

Luego de probar ambas tecnologías encontramos ventajas y desventajas
en ambas:

Turbo Gear (pros-contras)
--------------------------------

* malisimo

Django (pros-contras)
--------------------------------

* buenisimo.

Nos decidimos por Django

------------------------------------------------------------------------
Mondrian
------------------------------------------------------------------------

Según su propia descripcion:

"Mondrian es un servidor OLAP escrito en Java. Permite analizar
interactivamente conjuntos de datos de gran tamaño guardados en base
de datos SQL sin escribir SQL."

Mondrian es parte de la suite de Inteligencia de Negocios de Pentaho,
y ofrece una interfaz XMLA para consultas multidimensional. Es el lenguaje
de facto en el área, impuesto por SQL Server 2000 de Microsoft.

Nuestra experiencia fue negativa con Mondrian, principalmente por
la incompatibilidad de las herramientas libres disponibles y su
implementación de XMLA. 

------------------------------------------------------------------------
Exportacion XBase -> SQL
------------------------------------------------------------------------

Los datos de la empresa estaban almacenados en datos XBase (conocidas
popularmente por sus archivos .dbf), de acceso lento y sin integridad
referencial.

Inicialmente, el volumen de datos a trabajar era de 2.0 Gigabytes,
distribuidos más de 1000 archivos. Esto requería de una opción más
confiable y veloz, por lo que decidimos migrarlos utilizando
dbf2mysql hacia un motor de base de datos relacional como es MySQL.

Luego utilizamos SQL para extraer los datos y crear las bases de datos
multidimensional

------------------------------------------------------------------------
AJAX
------------------------------------------------------------------------

AJAX, acrónimo de Asynchronous JavaScript And XML (JavaScript
asíncrono y XML), es una técnica de desarrollo web para crear
aplicaciones interactivas. Actualmente es soportada por la mayoria de los
navegadores web.

Ajax no es una tecnología en sí mismo. En realidad, se trata de la
unión de varias tecnologías que se desarrollan de forma autónoma y que
se unen de formas nuevas y sorprendentes. Entre otras tecnologias que
integran AJAX se encuentran JavaScript, XML y CSS.

En las aplicaciones web tradicionales, las acciones del usuario en la
página desencadenan llamadas al servidor. Una vez procesada la
petición del usuario, el servidor devuelve una nueva página HTML al
navegador del usuario. Mediante el uso de AJAX las aplicaciones se
ejecutan en el cliente, es decir, en el navegador de los usuarios y
mantiene comunicación asíncrona con el servidor en segundo plano. De
esta forma es posible realizar cambios sobre la misma página sin
necesidad de recargarla. Esto significa aumentar la interactividad,
velocidad y usabilidad en la misma.

------------------------------------------------------------------------
Postgre
------------------------------------------------------------------------

PostgreSQL es un Sistema de Gestión de Bases de Datos
Objeto-Relacionales (ORDBMS) que ha sido desarrollado de varias formas
desde 1977. Comenzó como un proyecto denominado Ingres en la
Universidad Berkeley de California. Ingres fue más tarde desarrollado
comercialmente por la Relational Technologies/Ingres Corporation.

En 1986 otro equipo dirigido por Michael Stonebraker de Berkeley
continuó el desarrollo del código de Ingres para crear un sistema de
bases de datos objeto-relacionales llamado Postgres. En 1996, debido a
un nuevo esfuerzo de código abierto y a la incrementada funcionalidad
del software, Postgres fue renombrado a PostgreSQL, tras un breve
periplo como Postgres95. El proyecto PostgreSQL sigue actualmente un
activo proceso de desarrollo a nivel mundial gracias a un equipo de
desarrolladores y contribuidores de código abierto.



========================================================================
                              Herramientas
========================================================================

------------------------------------------------------------------------
Subversion
------------------------------------------------------------------------

El principal objetivo de Subversion (conocido popularmente como SVN)
es la administración de código fuente entre distintos
programadores. Pueden estar separados geográficamente (o bien realizar
cambios de forma asincróna) y mantener de manera simple un repositorio
central y con metadatos relacionados al proceso de desarrollo.

Se pueden restituir versiones anteriores del proyecto como también
generar nuevas ramas de desarrollo, por ejemplo para experimentación
de una funcionalidad en concreto.

------------------------------------------------------------------------
Wiki
------------------------------------------------------------------------

Las anotaciones del proyecto las realizamos con una herramientas web
de filosofía Wiki, provista por Google Code[4]. Esto nos permitió
realizar una base de conocimientos en hipertexto de manera sencilla y
rápida.

.. [4] http://code.google.com/p/proyectofinal



------------------------------------------------------------------------
ReStructured Text (RST)
------------------------------------------------------------------------

========================================================================
                          Servidor de cubos
========================================================================

------------------------------------------------------------------------
Introducción
------------------------------------------------------------------------

------------------------------------------------------------------------
ETL
------------------------------------------------------------------------

========================================================================
                            Documentación
========================================================================

------------------------------------------------------------------------
Juego de la planificacion
------------------------------------------------------------------------

.. include:: versiones-iteraciones-historias.txt

------------------------------------------------------------------------
Tests
------------------------------------------------------------------------

========================================================================
                             Conclusiones
========================================================================



========================================================================
                                Anexos
========================================================================

------------------------------------------------------------------------
Codigo de cubiculo
------------------------------------------------------------------------

------------------------------------------------------------------------
Licencia GPL
------------------------------------------------------------------------

La licencia pública general de GNU o mas conocida por su nombre en
inglés GNU General Public License o simplemente su acrónimo del inglés
GNU GPL. 

Es una licencia creada por la Free Software Foundation a mediados de
los 80, y está orientada principalmente a proteger la libre
distribución, modificación y uso de software. Su propósito es declarar
que el software cubierto por esta licencia es software libre y
protegerlo de intentos de apropiación que restrinjan esas libertadesa
los usuarios.

========================================================================
                              Bibliografia
========================================================================


